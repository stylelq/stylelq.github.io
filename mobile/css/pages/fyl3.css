@import url("https://use.typekit.net/fln0ron.css");@font-face{font-family:'Gotham';src:url(../../fonts/gotham/GothamBlack.ttf) format("truetype");font-weight:600;font-style:normal}@font-face{font-family:'Gotham';src:url(../../fonts/gotham/GothamMedium.ttf) format("truetype");font-weight:500;font-style:normal}@keyframes moving{0%{-webkit-transform:translateX(0%);transform:translateX(0%)}100%{-webkit-transform:translateX(-50%);transform:translateX(-50%)}}.site-project{margin-bottom:-3.125rem}.fyl3-wrap{position:relative}.move-txt{transform:translate(0, 0);animation:moving 5s infinite linear}.fyl-section1__video{position:relative;line-height:0}.fyl-section1__video--source{width:100%;position:relative}.fyl-section1__video .btn-play{top:50%;left:50%;display:inline-block;position:absolute;width:6.25rem;height:6.25rem;transform:translate(-50%, -50%);border:none}.fyl-section1__video .btn-play.is-play{background:url("../../images/project/fyl3/icon_play_btn.png?ver=211025") no-repeat center center / cover}.fyl-section2{background-color:#ffe100}.fyl-section2__wrap{padding:5.4375rem 0 5.9375rem}.fyl-section2__fix{margin:0 auto;text-align:center}.fyl-section2__fix--word{color:#000;text-transform:uppercase;text-align:center;font-size:.875rem;line-height:.875rem}.fyl-section2__fix--word:nth-child(2){padding:0 5.375rem}.fyl-section2__moving{overflow:hidden}.fyl-section2__moving--word{margin:0;display:inline-block;font-family:retiro-std-48pt, sans-serif;font-weight:400;font-size:6.25rem;line-height:100%;text-transform:uppercase}.fyl-section2__content{padding:3rem 0 0 1.25rem;font-family:'AppleSDGothicNeo', 'Noto Sans KR', sans-serif}.splitted{position:relative;display:inline-block}.splitted.bold{font-weight:bold}

/*# sourceMappingURL=data:application/json;base64, */
